package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"
	"fmt"

	"github.com/DevPio/gographql/graph/model"
)

// Courses is the resolver for the courses field.
func (r *categoryResolver) Courses(ctx context.Context, obj *model.Category) ([]*model.Course, error) {
	courses, err := r.CourseDb.FindByCategoryId(obj.ID)

	if err != nil {
		return nil, err
	}

	modelcousers := []*model.Course{}
	for _, course := range courses {
		modelcousers = append(modelcousers, &model.Course{
			ID:   course.ID,
			Name: course.Name,
		})
	}

	return modelcousers, err
}

// Catagory is the resolver for the catagory field.
func (r *courseResolver) Catagory(ctx context.Context, obj *model.Course) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Catagory - catagory"))
}

// CreateCategory is the resolver for the createCategory field.
func (r *mutationResolver) CreateCategory(ctx context.Context, input model.NewCategory) (*model.Category, error) {
	category, err := r.CategoryDb.Create(input.Name, *input.Description)

	if err != nil {
		return nil, err
	}

	return &model.Category{ID: category.ID, Name: category.Name, Description: category.Description}, nil
}

// CreateCourse is the resolver for the createCourse field.
func (r *mutationResolver) CreateCourse(ctx context.Context, input model.NewCourse) (*model.Course, error) {
	course, err := r.CourseDb.CreateCourse(input.Name, *input.Description, input.CategoryID)

	if err != nil {
		return nil, err
	}

	return &model.Course{ID: course.ID, Name: input.Name}, nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryDb.FindAll()

	if err != nil {
		return nil, err
	}

	curr := []*model.Category{}

	for _, c := range categories {
		curr = append(curr, &model.Category{ID: c.ID, Name: c.Name, Description: c.Description})
	}
	return curr, nil
}

// Courses is the resolver for the courses field.
func (r *queryResolver) Courses(ctx context.Context) ([]*model.Course, error) {
	courses, err := r.CourseDb.FindAll()

	if err != nil {
		return nil, err
	}

	coursesModel := []*model.Course{}

	for _, value := range courses {

		coursesModel = append(coursesModel, &model.Course{
			ID:   value.ID,
			Name: value.Name,
		})
	}

	return coursesModel, nil
}

// Category returns CategoryResolver implementation.
func (r *Resolver) Category() CategoryResolver { return &categoryResolver{r} }

// Course returns CourseResolver implementation.
func (r *Resolver) Course() CourseResolver { return &courseResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type categoryResolver struct{ *Resolver }
type courseResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
